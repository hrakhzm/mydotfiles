# -*- sh -*-

###############################################
#	ヒストリ
###############################################
## ヒストリを保存するファイル
HISTFILE=~/.zsh_history
## メモリ上のヒストリ数。
## 大きな数を指定してすべてのヒストリを保存するようにしている。
HISTSIZE=100000000
## 保存するヒストリ数
SAVEHIST=$HISTSIZE
## ヒストリファイルにコマンドラインだけではなく実行時刻と実行時間も保存する。
setopt extended_history
## 同じコマンドラインを連続で実行した場合はヒストリに登録しない。
setopt hist_ignore_dups
## スペースで始まるコマンドラインはヒストリに追加しない。
setopt hist_ignore_space
## すぐにヒストリファイルに追記する。
setopt inc_append_history
## zshプロセス間でヒストリを共有する。
setopt share_history
## C-sでのヒストリ検索が潰されてしまうため、出力停止・開始用にC-s/C-qを使わない。
setopt no_flow_control


###############################################
#	 プロンプトの作成
###############################################
## PROMPT内で変数展開・コマンド置換・算術演算を実行する。
setopt prompt_subst
## PROMPT内で「%」文字から始まる置換機能を有効にする。
setopt prompt_percent
## コピペしやすいようにコマンド実行後は右プロンプトを消す。
setopt transient_rprompt

# プロンプト左側
#   %{%B%}...%{%b%}: 「...」を太字にする。
#   %{%F{cyan}%}...%{%f%}: 「...」をシアン色の文字にする。
#   %n: ユーザ名
#   %m: ホスト名（完全なホスト名ではなくて短いホスト名）
#   %{%k%}: 背景色を元に戻す。
#   %{%f%}: 文字の色を元に戻す。
#   %{%b%}: 太字を元に戻す。
#   %{%B%K{magenta}%F{white}%}...%{%f%k%b%}:
#       「...」を太字のマゼンタ背景の白文字にする。
#   %d: カレントディレクトリのフルパス（省略しない）
prompt_left="[%{%B%}%n%{%b%}%{%F{cyan}%}@%{%f%}%{%B%}%m%{%b%} %{%B%F{white}%K{magenta}%}%~%{%k%f%b%}]"

##   %(1j,(%j),): 実行中のジョブ数が1つ以上ある場合だけ「(%j)」を表示。
#     %j: 実行中のジョブ数。
#   %{%B%}...%{%b%}: 「...」を太字にする。
#   %#: 一般ユーザなら「%」、rootユーザなら「#」になる。
prompt_left_jobinfo="%(1j,(%j),)%{%B%}%#%{%b%} "

# プロンプトの右側
#バージョン管理システムの情報
autoload -Uz vcs_info
zstyle ':vcs_info:*' formats \
    '(%{%F{white}%K{green}%}%s%{%f%k%})-[%{%F{white}%K{blue}%}%b%{%f%k%}]'
zstyle ':vcs_info:*' actionformats \
    '(%{%F{white}%K{green}%}%s%{%f%k%})-[%{%F{white}%K{blue}%}%b%{%f%k%}|%{%F{white}%K{red}%}%a%{%f%k%}]'

## プロンプトを更新する。
update_prompt()
{
	#左プロンプト
	PROMPT="${prompt_left}${prompt_left_jobinfo}"
	#右プロンプト
	RPROMPT=""
	case "$TERM_PROGRAM" in
	Apple_Terminal)
	    # Mac OS Xのターミナルでは$COLUMNSに右余白が含まれていないので
	    # 右プロンプトに「-」を追加して調整。
	    ## 2011-09-05
	    RPROMPT="${RPROMPT}-"
	    ;;
	esac

    # バージョン管理システムの情報を取得する。
    LANG=C vcs_info >&/dev/null
    # バージョン管理システムの情報があったら右プロンプトに表示する。
    if [ -n "$vcs_info_msg_0_" ]; then
	RPROMPT="${vcs_info_msg_0_}-${RPROMPT}"
    fi
}

## コマンド実行前に呼び出されるフック。
precmd_functions=($precmd_functions update_prompt)


###############################################
# 補完
###############################################
## 初期化
autoload -U compinit
compinit

## 補完方法毎にグループ化する。
### 補完方法の表示方法
###   %B...%b: 「...」を太字にする。
###   %d: 補完方法のラベル
zstyle ':completion:*' format '%B%d%b'
zstyle ':completion:*' group-name ''

## 補完侯補をメニューから選択する。
### select=2: 補完候補を一覧から選択する。
###           ただし、補完候補が2つ以上なければすぐに補完する。
zstyle ':completion:*:default' menu select=2

## 補完候補に色を付ける。
### "": 空文字列はデフォルト値を使うという意味。
zstyle ':completion:*:default' list-colors ""

## 補完候補がなければより曖昧に候補を探す。
### m:{a-z}={A-Z}: 小文字を大文字に変えたものでも補完する。
### r:|[._-]=*: 「.」「_」「-」の前にワイルドカード「*」があるものとして補完する。
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z} r:|[._-]=*'

## 補完方法の設定。指定した順番に実行する。
### _oldlist 前回の補完結果を再利用する。
### _complete: 補完する。
### _match: globを展開しないで候補の一覧から補完する。
### _history: ヒストリのコマンドも補完候補とする。
### _ignored: 補完候補にださないと指定したものも補完候補とする。
### _approximate: 似ている補完候補も補完候補とする。
### _prefix: カーソル以降を無視してカーソル位置までで補完する。
zstyle ':completion:*' completer \
    _oldlist _complete _match _history _ignored _approximate _prefix

## 補完候補をキャッシュする。
zstyle ':completion:*' use-cache yes
## 詳細な情報を使う。
zstyle ':completion:*' verbose yes
## sudo時にはsudo用のパスも使う。
zstyle ':completion:sudo:*' environ PATH="$SUDO_PATH:$PATH"

## カーソル位置で補完する。
setopt complete_in_word
## globを展開しないで候補の一覧から補完する。
setopt glob_complete
## 補完時にヒストリを自動的に展開する。
setopt hist_expand
## 補完候補がないときなどにビープ音を鳴らさない。
setopt no_beep
## 辞書順ではなく数字順に並べる。
setopt numeric_glob_sort

# 展開
## --prefix=~/localというように「=」の後でも
## 「~」や「=コマンド」などのファイル名展開を行う。
setopt magic_equal_subst
## 拡張globを有効にする。
## glob中で「(#...)」という書式で指定する。
setopt extended_glob
## globでパスを生成したときに、パスがディレクトリだったら最後に「/」をつける。
setopt mark_dirs

###############################################
#	その他
###############################################
# キーバインド
## Emacsキーバインドを使う。
bindkey -e

# ディレクトリ移動
## ディレクトリ名だけでcdする。
setopt auto_cd
## cdで移動してもpushdと同じようにディレクトリスタックに追加する。
setopt auto_pushd
## カレントディレクトリ中に指定されたディレクトリが見つからなかった場合に
## 移動先を検索するリスト。
cdpath=(~)
## ディレクトリが変わったらディレクトリスタックを表示。
chpwd_functions=($chpwd_functions dirs)

# ジョブ
## jobsでプロセスIDも出力する。
setopt long_list_jobs


# 実行時間
## 実行したプロセスの消費時間が3秒以上かかったら
## 自動的に消費時間の統計情報を表示する。
REPORTTIME=3

# ログイン・ログアウト
## 全てのユーザのログイン・ログアウトを監視する。
watch="all"
## ログイン時にはすぐに表示する。
log

## ^Dでログアウトしないようにする。
setopt ignore_eof


# 単語
## 「/」も単語区切りとみなす。
WORDCHARS=${WORDCHARS:s,/,,}
## 「|」も単語区切りとみなす。
## 2011-09-19
WORDCHARS="${WORDCHARS}|"

####################################################
#			 alias
####################################################


# alias
## ページャーを使いやすくする。
### grep -r def *.rb L -> grep -r def *.rb |& lv
alias -g L="|& $PAGER"
## grepを使いやすくする。
alias -g G='| grep'
## 後はおまけ。
alias -g H='| head'
alias -g T='| tail'
alias -g S='| sed'

## 完全に削除。
alias rr="command rm -rf"
## ファイル操作を確認する。
alias rm="rm -i"
alias cp="cp -i"
alias mv="mv -i"

## pushd/popdのショートカット。
alias pd="pushd"
alias po="popd"

## sshで文字化けを防ぐ
alias -g sshe="cocot -t UTF-8 -p EUC-JP -- ssh"

## 標準入力をクリップボードにコピーする
alias pbcopy="xsel --clipboard --input"

## lsとpsの設定
### ls: できるだけGNU lsを使う。
### ps: 自分関連のプロセスのみ表示。
case $(uname) in
    *BSD|Darwin)
	if [ -x "$(which gnuls)" ]; then
	    alias ls="gnuls"
	    alias la="ls -lhAF --color=auto"
	else
	    alias la="ls -lhAFG"
	fi
	alias ps="ps -fU$(whoami)"
	;;
    SunOS)
	if [ -x "`which gls`" ]; then
	    alias ls="gls"
	    alias la="ls -lhAF --color=auto"
	else
	    alias la="ls -lhAF"
	fi
	alias ps="ps -fl -u$(/usr/xpg4/bin/id -un)"
	;;
    *)
	alias la="ls -lhAF --color=auto"
	alias ps="ps -fU$(whoami) --forest"
	;;
esac

#http://d.hatena.ne.jp/jeneshicc/20090224/1235475290
# some more ls aliases
alias ls='ls -G'
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
		eval "`dircolors -b`"
		alias ls='ls --color=auto'
		alias dir='dir --color=auto'
		alias vdir='vdir --color=auto'
		alias grep='grep --color=auto'
		alias fgrep='fgrep --color=auto'
		alias egrep='egrep --color=auto'
fi

## exitのショートカット。
alias x="exit"

# ウィンドウタイトル
## 実行中のコマンドとユーザ名とホスト名とカレントディレクトリを表示。
update_title() {
    local command_line=
    typeset -a command_line
    command_line=${(z)2}
    local command=
    if [ ${(t)command_line} = "array-local" ]; then
	command="$command_line[1]"
    else
	command="$2"
    fi
    print -n -P "\e]2;"
    echo -n "(${command})"
    print -n -P " %n@%m:%~\a"
}
## X環境上でだけウィンドウタイトルを変える。
if [ -n "$DISPLAY" ]; then
    preexec_functions=($preexec_functions update_title)
fi

alias perl.exe="perl"
alias cata="lv /usr/local/tomcat/logs/catalina.out"
alias rst="sudo /home/forcia/rstWebFast"
alias rstp="sudo /home/forcia/bin/restartWeb.sh stop"
alias rsta="sudo /home/forcia/bin/restartWeb.sh start"
alias grac="sudo /home/forcia/bin/httpd graceful"
alias hazama="cd /data/git/hazama/setting"
alias mnt="sudo mount -t vboxsf mercurial_Repos /home/forcia/MercurialRepos"
alias httpd="sudo vim /usr/local/apache/conf/httpd.conf"
alias vhost="sudo vim /usr/local/apache/conf/extra/httpd-vhosts.conf"
alias prox="sudo vim /usr/local/apache/conf/extra/httpd-proxy.conf"
alias so="source ~/.zshrc"
alias zshr="vim ~/.zshrc"
alias psa="ps ax|grep httpd"
alias pst="ps ax|grep tomcat"
alias psp="ps ax|grep postgres"
alias onkntdp="unlinkWebapps && setWebapps knt_dp knt_dp/web && setWebapps filesync tools/FileSynchronizer4"
alias onknt="unlinkWebapps && setWebapps knt knt/knt/web && setWebapps filesync tools/FileSynchronizer4"
alias onjtt="unlinkWebapps && setWebapps jtt jtt/jtt/web && setWebapps filesync tools/FileSynchronizer4"
alias onjt="unlinkWebapps && setWebapps dom_tour jtb/dom_tour/web && setWebapps filesync tools/FileSynchronizer4"
alias onjy="unlinkWebapps && setWebapps dom_yado jtb/dom_yado/web && setWebapps filesync tools/FileSynchronizer4"
alias onjyjt="unlinkWebapps && setWebapps dom_yado jtb/dom_yado/web && setWebapps dom_tour jtb/dom_tour/web && setWebapps filesync tools/FileSynchronizer4"
alias onusj="unlinkWebapps && switchTomcat 8.0.35 && switchJava 1.8.0_91 && setWebapps usj jtb/usj/web"
alias knt="cd /home/forcia/gitlab_local/knt/knt/"
alias dp="cd /home/forcia/gitlab_local/knt_dp"
alias jtt="cd /home/forcia/gitlab_local/jtt/jtt/"
alias jy="cd /home/forcia/gitlab_local/jtb/dom_yado/"
alias jt="cd /home/forcia/gitlab_local/jtb/dom_tour/"
alias jc="cd /home/forcia/gitlab_local/jtb/jtb_cfunction/"
alias jdd="cd /home/forcia/gitlab_local/jtb/jtb_dom_dp/"
alias kdy="cd /home/forcia/gitlab_local/knt/knt_dom_yado/"
alias kda="cd /home/forcia/gitlab_local/knt/knt_dom_air/"
alias kdt="cd /home/forcia/gitlab_local/knt/knt_dom_train/"
alias kdp="cd /home/forcia/gitlab_local/knt/knt_dom_app/"
alias kdd="cd /home/forcia/gitlab_local/knt/knt_docs/"
alias kkp="cd /home/forcia/gitlab_local/webconnect/kkg_dom_app/"
alias kkps="cd /home/forcia/gitlab_local/webconnect/kkg_dom_app/web/server"
alias kkpc="cd /home/forcia/gitlab_local/webconnect/kkg_dom_app/web/client"
alias kky="cd /home/forcia/gitlab_local/webconnect/kkg_dom_yado/"
alias doc="cd /home/forcia/gitlab_local/webconnect/kkg_dom_yado/docker"
alias kkc="cd /home/forcia/gitlab_local/webconnect/kkg_cfunction/"
alias kkt="cd /home/forcia/gitlab_local/webconnect/kkg_dom_train/"
alias tad="cd /home/forcia/gitlab_local/forcia-standards/travel-api-docs/"
alias gco="git checkout"
alias tig="tig --all"

####################################################
#	PECO
####################################################

#history
function peco-history-selection() {
	BUFFER=$( \
		history -n 1 	|
		tac				|
		awk '!a[$0]++' 	|
		peco)				
	CURSOR=$#BUFFER
	zle clear-screen
}

zle -N peco-history-selection
bindkey '^R' peco-history-selection

function peco-cd-selection() {
	BUFFER=$( \
		history -n 1 	|
		grep "^cd "		|
		tac				|
		awk '!a[$0]++' 	|
		peco)				
	CURSOR=$#BUFFER
	zle clear-screen
}

zle -N peco-cd-selection
bindkey '^d' peco-cd-selection

####################################################
# Utility function
####################################################

function switchJava() {
	local JAVA_VERSION=$1
	sudo unlink /usr/local/java
	cd /usr/local/
	sudo ln -s jdk${JAVA_VERSION} java
	echo "switch Java${JAVA_VERSION}"
}

function switchTomcat() {
	local TOMCAT_VERSION=$1
	sudo unlink /usr/local/tomcat
	cd /usr/local/
	sudo ln -s tomcat-${TOMCAT_VERSION} tomcat
	echo "switch tomcat${TOMCAT_VERSION}"
}

function unlinkWebapps() {
	sudo find /usr/local/tomcat/webapps/ -maxdepth 1 -type l -delete
}

function setWebapps() {
	local appname=$1
	local repos_path=$2
	sudo ln -s /data/git/${repos_path} /usr/local/tomcat/webapps/${appname}
	echo "set ${appname}"
}



####################################################

####################################################
#	PATH
####################################################

PATH=$HOME/.phantomjs/bin:/usr/local/pgsql/bin:/usr/local/tomcat/bin:/usr/local/apache/bin:/usr/local/python/bin:/home/forcia/perl5/bin/:/home/forcia/bin/:/usr/local/bin/:/usr/bin/$PATH

export PERL_LOCAL_LIB_ROOT="$PERL_LOCAL_LIB_ROOT:/home/forcia/perl5";
export PERL_MB_OPT="--install_base /home/forcia/perl5";
export PERL_MM_OPT="INSTALL_BASE=/home/forcia/perl5";
export PERL5LIB="/home/forcia/perl5/lib/perl5/x86_64-linux-gnu-thread-multi:/home/forcia/perl5/lib/perl5:$PERL5LIB";

export ANT_HOME=/usr/local/ant
export JAVA_HOME=/usr/local/java
export MAVEN_HOME=/usr/local/maven
export PATH=/home/forcia/bin/apricot-shell-1.1.1/bin:$PATH
export APRICOT_SHELL_EXECUTABLE_HOME=/home/forcia/bin/apricot-shell-1.1.1/
export PATH=/data/git/frameworks/apricot_modules/jasmine-apricot/bin:$PATH
export APRICOT_MODULE_PATH=/data/git/frameworks/apricot_modules

PATH=$MAVEN_HOME/bin:$JAVA_HOME/bin:$ANT_HOME/bin:$APRICOT_SHELL_EXECUTABLE_HOME/bin:$APRICOT_MODULE_PATH:$APRICOT_MODULE_PATH/jasmine-apricot/bin:$PYENV_ROOT/bin:$PATH

#nvm
source /home/forcia/github/nvm/nvm.sh
nvm use --delete-prefix v12.14.1
#pyenv
export PYENV_ROOT="/home/forcia/github/pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

#goenv
export GOENV_ROOT=$HOME/github/goenv
export PATH=$GOENV_ROOT/bin:$PATH
eval "$(goenv init -)"

#rust
source $HOME/.cargo/env
